<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Web of Things (WoT) Thing Description</title>
    <script src="https://www.w3.org/Tools/respec/respec-w3c-common" class="remove"></script>
    <script class='remove'>
var respecConfig = {
  specStatus: "ED",
  shortName: "wot-thing-description",
  copyrightStart:       2017,
  noLegacyStyle:        true,
  publishDate:          "",
  previousPublishDate:  "",
  previousMaturity:     "",
  edDraftURI:           "https://w3c.github.io/wot-thing-description/",
  crEnd:                "",
  inlineCSS:            true,
  noIDLIn:              true,
  format:               'markdown',
  editors: [
    { name: "Sebastian Kaebisch", company: "Siemens" },
    { name: "Takuki Kamiya", company: "Fujitsu" },
  ],
  wg:           "Web of Things Working Group",
  wgURI:        "https://www.w3.org/WoT/WG/",
  wgPublicList: "member-wot-wg@w3.org",
  issueBase: "https://www.github.com/w3c/wot-thing-description/issues/",
  githubAPI: "https://api.github.com/repos/w3c/wot-thing-description",


  localBiblio:  {
    "draft-fge-json-schema-validation-00": {
      title:    "JSON Schema: interactive and non interactive validation",
      href:     "https://tools.ietf.org/html/draft-fge-json-schema-validation-00",
      authors:  [
        "Kris Zyp",
        "Gary Court"
      ],  
      status:   "Internet-Draft",
      publisher:  "IETF"
    },
    "draft-zyp-json-schema-04": {
      title:    "JSON Schema: core definitions and terminology",
      href:     "https://tools.ietf.org/html/draft-zyp-json-schema-04",
      authors:  [
        "Kris Zyp",
        "Gary Court"
      ],
      status:   "Internet-Draft",
      publisher:  "IETF"
    },
    "WOT-ARCHITECTURE" : {
      title: "Web of Things Architecture",
      href: "https://w3c.github.io/wot-architecture/",
      authors:  [
        "W3C WoT Working Group"
      ],
      publisher: "W3C",
      date: "20 August 2017"
    }
  },
  otherLinks: [
    {
      key: "Repository",
      data: [{
            value: "We are on Github.",
            href: "https://github.com/w3c/wot-thing-description"
        }, {
            value: "File a bug.",
            href: "https://github.com/w3c/wot-thing-description/issues"
        }, {
            value: "Commit history.",
            href: "https://github.com/w3c/wot-thing-description/commits/"
        }, {
            value: "Use cases",
            href: "https://github.com/w3c/wot-thing-description/use-cases.html"
        }
      ]
    },
    {
      key: "Contributors",
      data: [
          {
            value: "In the github repository",
            href: "https://github.com/w3c/wot-thing-description/graphs/contributors"
          }
      ]
    },
  ],
};
    </script>
<style>
.example {
		border-color: #EA1252;
		background: #FEF11E;
		counter-increment: example;
		overflow: auto;
		clear: both;
	}
</style>
  </head>
  <body>

  <section id="abstract">
This document describes a common data model and representation for Web of Things (WoT) Thing Description. Thing Description describes metadata and interfaces of Things, where a Thing is an abstraction of a physical entity that provides interactions to and participates in Web of Things. Thing Description provides a narrow-waist set of small vocabulary that makes it possible both to integrate diverse devices and to make diverse applications interoperable. Thing Description, by default, is encoded in JSON-LD. JSON-LD provides both powerful foundation to represent knowledges about Things and simplicity to process itself as a JSON document. In addition to physical entity, Things can also represent virtual entities. A Thing Description instance can be hosted by the Thing itself or hosted externally due to Thing's resource restrictions (e.g. limited memory space) or when a Web of Thing-compatible legacy device is retrofitted with a Thing Description.

<!-- for devices.
The TD must be acquired to use and interact with the Thing, since it describes the semantics of a Thing as well as its <a>WoT Interface</a>. Usually, Things directly provide their own TD, but the TD can also be hosted externally if there is not enough space on the device or when a WoT-compatible legacy device is retrofitted with a TD.-->
  </section>

  <section id="sotd">
  <p>
    Implementers need to be aware that this specification is considered unstable. Vendors interested in implementing this specification before it eventually reaches the Candidate Recommendation phase should subscribe to the [repository](https://github.com/w3c/wot-thing-description) and take part in the discussions.
  </p>
  </section>

  <section id="introduction">
    <h1>Introduction</h1>
    <p>
The W3C Thing Description (TD) is a central building block in a Web of Things (WoT) enabled system and can be considered as the entry point of a Thing (aka the <i>index.html</i> of the Thing). The TD consists of semantic metadata for the Thing itself, a narrow-waist interaction model with WoT's Properties, Actions, and Events, a semantic schema to make data models machine-understandable, and features for Web Linking to express relations among Things. 
</p>
<p>
Properties can be used for controlling parameters, such as a set point or operation state. Actions model invocation of physical processes, but can also be used to abstract RPC-like calls of existing platforms. Events cover the push model where state change notifications, discrete events, and streams of values are sent asynchronously to the receiver. In general, the TD provides metadata for the different communication bindings (e.g., HTTP, CoAP, (MQTT?), etc.), mediaTypes (e.g., "application/json", "application/xml", "application/cbor", "application/exi" etc.), and security policies (authentication, authorization, etc.). The default serialisation of the TD is JSON-LD.
</p>

<p>
Example 1 shows a simple TD instance that describes a lamp Thing with the name <i>MyLampThing</i>.
</p>

<pre class="example" title="Simple Thing Description Sample">
  {
    "@context": ["http://w3c.github.io/wot/w3c-wot-td-context.jsonld"],
    "@type": "Thing",
    "name": "MyLampThing",
    "interactions": [
        {
            "@type": ["Property"],
            "name": "status",
            "outputData": {"type": "string"},
            "writable": false,
            "links": [{
                "href": "coaps://mylamp.example.com:5683/status",
                "mediaType": "application/json"
            }]
        },
        {
            "@type": ["Action"],
            "name": "toggle",
            "links": [{
                "href": "coaps://mylamp.example.com:5683/toggle",
                "mediaType": "application/json"
            }]
        },
        {
            "@type": ["Event"],
            "name": "overheating",
            "outputData": {"type": "string"},
            "links": [{
                "href": "coaps://mylamp.example.com:5683/oh",
                "mediaType": "application/json"
            }]
        }
    ]
  }
 </pre>





<p>Based on this content, we know there exists one Property interaction resource with the name <i>status</i>. In addition, information is provided such as that this Property is accessable over the CoAP protocol with a GET method (see CoAP protocol binding description in the W3C WoT protocol template deliverable [XXX]) at coaps://mylamp.example.com:5683/status (announced within the endoind (SP?) structure by the <code>href</code> key), which will return a string status value within a JSON structure (JSON as payload format is announced by the <code>mediaType</code> field).
</p>

<p class="ednote">
Short explanation of the example.
</p>
</section>

  <section id="terminology"> 
    <h2>Terminology</h2>
<p>The generic WoT terminology is defined in [[!WOT-ARCHITECTURE]]: <dfn data-lt="Things">Thing</dfn>, <dfn data-lt="Thing Descriptions">Thing Description</dfn> (in short <dfn>TD</dfn>), <dfn>Web of Things</dfn> (in short <b><i>WoT</i></b>),  <dfn>WoT Interface</dfn> etc.
</p>
  </section>

  <section>
    <h1>Namespaces</h1>

<p>
The namespace for TD is http://www.w3.org/ns/td#. TD itself defines a minimal set of classes and properties of its own. A full set of namespaces and prefixes used in this document is shown in the table below.
</p>

<table id="namespacesTable">
  <thead><tr><th>Prefix</th><th>Namespace</th></tr></thead>
  <tbody>
     <tr><td>rdf</td><td>http://www.w3.org/1999/02/22-rdf-syntax-ns#</td></tr>
    <tr><td>rdfs</td><td>http://www.w3.org/2000/01/rdf-schema#</td></tr>
    <tr><td>xsd</td><td>http://www.w3.org/2001/XMLSchema#</td></tr>
  </tbody>
</table>


<p class="ednote">
ToDo: complete table
</p>
</section>
<section>
    <h1>Conformance</h1>

<p>
  As well as sections marked as non-normative, all authoring guidelines, diagrams, examples,   and notes in this specification are non-normative. Everything else in this specification is
  normative.
</p>
<p>
  The key words <em title="MUST" class="rfc2119">MUST</em>, <em title="MUST NOT" class="rfc2119">MUST NOT</em>, <em title="REQUIRED" class="rfc2119">REQUIRED</em>, <em title="SHOULD" class="rfc2119">SHOULD</em>, <em title="SHOULD NOT" class="rfc2119">SHOULD NOT</em>, <em title="RECOMMENDED" class="rfc2119">RECOMMENDED</em>, <em title="MAY" class="rfc2119">MAY</em>,
  and <em title="OPTIONAL" class="rfc2119">OPTIONAL</em> in this specification are to be interpreted as described in [<cite><a href="#bib-RFC2119" class="bibref">RFC2119</a></cite>].
</p>

 


<table id="namespacesTable">
  <tbody>
     <tr><td>A Thing Description instance complies with this specification if it follows the normative statements in Section <a href="#vocabularyDefinitionSection" class="sec-ref"><span class="secno">3.</span> <span class="sec-title">Vocabulary Definition</span></a>.</td> </tr>
    <tr><td>In case of JSON-LD serializiation, a Thing Description instance in JSON-LD format complies with this specification if it follows the normative statements in Section <a href="#serialization" class="sec-ref"><span class="secno">4.</span> <span class="sec-title">Serialization</span></a></td> </tr>
   </tbody>
</table>
 

<p class="issue">
How to validate TD? RDF validation? Structure validation?
</p>

</section>



  {vocabulary.template}

  <section>
    <h1>Serialization</h1>

<p>
  Thing Description instances are modeled on the classes defined in <a href="#vocabularyDefinitionSection" class="sec-ref"></a>, and they are serialized in <a href="https://www.w3.org/TR/json-ld/">JSON-LD</a> by default, using the vocabulary defined there when they are served at run-time.
  JSON-LD is a serialization format that adds a semantic layer on top of the JSON specification: the terms that appear in a JSON document
  should be associated with uniquely identified concepts from shared vocabularies. This principle is part of a set of practices to publish data
  on the Web called Linked Data, where concepts are usually identified with URIs and originate from RDF vocabularies.
</p>

      <!-- p class="ednote">Currently, JSON-LD is seen as baseline for TD serialization. In TD task force alternatives are evaluated.
      </p -->

    <section>
      <h2 id="link-serialization">Link</h2>

      <p>This section describes JSON-LD serialization for the instances of the <a href="#link" class="sec-ref"></a> class. Shown below is an example of a link definition.
      </p>

      <pre class="example">
        "link": [
          {
            "href" : "coap://mytemp.example.com:5683/temp",
            "mediaType": "application/json"
          }
        ]
      </pre>

      <p>JSON-LD representation for a link definition is a JSON array with name "link". 
         Each item in the array is a JSON object that consists of two JSON fields as summarized below.
      </p>

      <table class="def">
        <thead>
          <tr>
            <th>Field Name</th>
            <th>JSON Construct</th>
            <th>Occurrence</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>href</td>
            <td>string</td>
            <td>required</td>
            <td>URI. A relative URIs are relative to base URI</td>
          </tr>
          <tr>
            <td>mediaType</td>
            <td>string</td>
            <td>required</td>
            <td>Media type based on IANA</td>
          </tr>
        </tbody>
      </table>


      <p>The correspondences between the fields of the Link class and the JSON fields defined above are as follows.
      </p>

      <table class="def">
        <thead>
          <tr>
            <th>Field in Link Class</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>href</td>
            <td>The value of JSON property <code>href</code>
          </tr>
          <tr>
            <td>mediaType</td>
            <td>The value of JSON property <code>mediaType</code></td>
          </tr>
        </tbody>
      </table>


    </section>

  <section id="interaction-resources">
    <h1>Interaction Resources</h1>

    <p>
      An interaction in the context of the Web of Things is an exchange of data between a Web client and a Thing.
      This data can be either given as input by the client, returned as output by the Thing, or both.
      Three interaction patterns are defined: 
      <a href="#property-serialization">Property</a>, 
      <a href="#action-serialization">Action</a>, and 
      <a href="#event-serialization">Event</a>.
    </p>
  
    <section id="property-serialization">
      <h3>Property</h3>
  
      <p>
        The <code>Property</code> interaction definitions (also see <a href="#property">Property vocabulary definition section</a>) provides metadata for readable and/or writeable data that can be static (e.g., supported mode, rated output voltage, etc.) or 
        dynamic (e.g., current fill level of water, minimum recorded temperature, etc.).
        Shown below is an example of a <code>Property</code> interaction definition.
      </p>


      <pre class="example">
        {
          ...
          "interaction": [
            {
              "@type": ["Property"],
              "name": "temperature",
              "outputData":{ "type": "number" },
              "writable": false,
              "link": [{
                "href" : "coap://mytemp.example.com:5683/temp",
                "mediaType": "application/json"
              }]
            },
          ...
        }
      </pre>

      <p>The JSON-LD representation for a <code>Property</code> interaction definition is a JSON object of which the fields are defined below.</p>

      <table class="def">
        <thead>
          <tr>
            <th>Field Name</th>
            <th>JSON Construct</th>
            <th>Occurrence</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>@type</td>
            <td>array of strings</td>
            <td>required</td>
            <td>The array MUST start with a string "Property"</td>
          </tr>
          <tr>
            <td>name</td>
            <td>string</td>
            <td>required</td>
            <td>Name of the Property</td>
          </tr>
          <tr>
            <td>outputData</td>
            <td>object</td>
            <td>required</td>
            <td>See <a href="#type-system" class="sec-ref"></a></td>
          </tr>
          <tr>
            <td>writable</td>
            <td>boolean</td>
            <td>required</td>
            <td>a property is writable (=true) or not (=false)</td>
          </tr>
          <tr>
            <td>link</td>
            <td>array of objects</td>
            <td>required</td>
            <td>See <a href="#link-serialization" class="sec-ref"></a></td>
          </tr>
        </tbody>
      </table>

      <p>The correspondences between the fields of the <a href="#property">Property class</a> and the JSON properties defined above are as follows.
      </p>

      <table class="def">
        <thead>
          <tr>
            <th>Field in Property Class</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>link</td>
            <td>The value of JSON property <code>link</code>
          </tr>
          <tr>
            <td>name</td>
            <td>The value of JSON property <code>name</code></td>
          </tr>
          <tr>
            <td>outputData</td>
            <td>The value of JSON property <code>outputData</code></td>
          </tr>
          <tr>
            <td>isWritable</td>
            <td>The value of JSON property <code>writable</code></td>
          </tr>
        </tbody>
      </table>

    </section>
  
    <section id="action-serialization">
      <h3>Action</h3>
  
      <p>
        The <code>Action</code> interaction pattern (also see <a href="#action">Action vocabulary definition section</a>) targets changes or processes on a Thing that take a certain time to complete (i.e., actions cannot be applied instantaneously like property writes).
        Examples include an LED fade in, moving a robot, brewing a cup of coffee, etc.
        Usually, ongoing Actions are modeled as Task resources, which are created when an Action invocation is received by the Thing.
      </p>
  
      <pre class="example">
        {
          ...
          "interaction": [
            {
              "@type": ["Action"],
              "name": "fadeIn",
              <i>"inputData":</i> { "type": "integer" },
              "link": [{
              	"href" : "coap://mytemp.example.com:5683/in",
              	"mediaType": "application/json"
              }]
            }
          ]
          ...
        }
      </pre>

      <p>JSON-LD representation for an <code>Action</code> interaction definition is a JSON object of which the fields are defined below.</p>

      <table class="def">
        <thead>
          <tr>
            <th>Field Name</th>
            <th>JSON Construct</th>
            <th>Occurrence</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>@type</td>
            <td>array of strings</td>
            <td>required</td>
            <td>The array MUST start with a string "Action"</td>
          </tr>
          <tr>
            <td>name</td>
            <td>string</td>
            <td>required</td>
            <td>Name of the Action</td>
          </tr>
          <tr>
            <td>outputData</td>
            <td>object</td>
            <td>required</td>
            <td>See <a href="#type-system" class="sec-ref"></a></td>
          </tr>
          <tr>
            <td>inputData</td>
            <td>object</td>
            <td>required</td>
            <td>See <a href="#type-system" class="sec-ref"></a></td>
          </tr>
          <tr>
            <td>link</td>
            <td>array of objects</td>
            <td>required</td>
            <td>See <a href="#link-serialization" class="sec-ref"></a></td>
          </tr>
        </tbody>
      </table>

      <p>The correspondences between the fields of the <a href="#action">Action class</a> and the JSON properties defined above are as follows.
      </p>

      <table class="def">
        <thead>
          <tr>
            <th>Field in Action Class</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>link</td>
            <td>The value of JSON property <code>link</code>
          </tr>
          <tr>
            <td>name</td>
            <td>The value of JSON property <code>name</code></td>
          </tr>
          <tr>
            <td>outputData</td>
            <td>The value of JSON property <code>outputData</code></td>
          </tr>
          <tr>
            <td>inputData</td>
            <td>The value of JSON property <code>inputData</code></td>
          </tr>
        </tbody>
      </table>

    </section>
  
    <section id="event-serialization">
      <h3>Event</h3>
  
      <p>
        The <code>Event</code> interaction pattern (also see <a href="#event">Event vocabulary definition section</a>) enables a mechanism to be notified by a Thing on a certain condition.
        While some protocols such as CoAP can provide such a mechanism natively, others do not.
        Furthermore, Events might need a specific configuration that requires data sent and stored on the Thing in a standard way.
        There are are two mandatory and two optional terms defined within the <code>Event</code> pattern:
      </p>
  
      <pre class="example">

        {
          ...
          "interaction": [
            {
              "@type": ["Event"],
              "name": "criticalCondition",
              "outputData":  { "type": "string" },
              "link": [{
              	"href" : "coap://mytemp.example.com:5683/ev",
              	"mediaType": "application/json"
              }]
            }
          ]
          ...
        }
      </pre>

    </section>

      <p>The JSON-LD representation for an <code>Event</code> interaction definition is a JSON object of which the fields are defined below.</p>

      <table class="def">
        <thead>
          <tr>
            <th>Field Name</th>
            <th>JSON Construct</th>
            <th>Occurrence</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>@type</td>
            <td>array of strings</td>
            <td>required</td>
            <td>The array MUST start with a string "Event"</td>
          </tr>
          <tr>
            <td>name</td>
            <td>string</td>
            <td>required</td>
            <td>Name of the Event</td>
          </tr>
          <tr>
            <td>outputData</td>
            <td>object</td>
            <td>required</td>
            <td>See <a href="#type-system" class="sec-ref"></a></td>
          </tr>
          <tr>
            <td>link</td>
            <td>array of objects</td>
            <td>required</td>
            <td>See <a href="#link-serialization" class="sec-ref"></a></td>
          </tr>
        </tbody>
      </table>

      <p>The correspondences between the fields of the <a href="#event">Action class</a> and the JSON properties defined above are as follows.
      </p>

      <table class="def">
        <thead>
          <tr>
            <th>Field in Event Class</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>link</td>
            <td>The value of JSON property <code>link</code>
          </tr>
          <tr>
            <td>name</td>
            <td>The value of JSON property <code>name</code></td>
          </tr>
          <tr>
            <td>outputData</td>
            <td>The value of JSON property <code>outputData</code></td>
          </tr>
        </tbody>
      </table>

  </section>

  <section id="security-serialization">
    <h1>Security</h1>

<p>Shown below is an example of a security resource definition.</p>

<pre class="example">
  {
    ...
    "security": {
      "cat": "token:jwt", 
      "alg":"HS256", 
      "as":"https://authority-issuing.org"
    },
    ...
  }
</pre>

<p>In the above example, a JSON Web Token (JWT) type is assigned ("cat"), along with a corresponding hashing algorithm "HS256" ("alg") and the issuing authority of the security token ("as").</p>

      <p class="ednote">Consider the need for a context definition for the above example.
      </p>
  </section>

  <section>
    <h1>Thing as a Whole</h1>

      <p>The JSON-LD representation for a Thing Description is a JSON object of which fields are defined below.</p>

      <table class="def">
        <thead>
          <tr>
            <th>Field Name</th>
            <th>JSON Construct</th>
            <th>Occurrence</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>@context</td>
            <td>array of strings</td>
            <td>required</td>
            <td>The array MUST contain a string "https://w3c.github.io/wot/w3c-wot-td-context.jsonld". Also see below.</td>
          </tr>
          <tr>
            <td>@type</td>
            <td>array of strings</td>
            <td>optional</td>
            <td>Gives annotations to the Thing</td>
          </tr>
          <tr>
            <td>name</td>
            <td>string</td>
            <td>required</td>
            <td>Name of the Thing</td>
          </tr>
          <tr>
            <td>base</td>
            <td>string</td>
            <td>required</td>
            <td>Base URI for use in a Thing Description</td>
          </tr>
          <tr>
            <td>interaction</td>
            <td>array of objects</td>
            <td>optional</td>
            <td>See <a href="#interaction-resources" class="sec-ref"></a></td>
          </tr>
          <tr>
            <td>security</td>
            <td>array of objects</td>
            <td>optional</td>
            <td>See <a href="#security-serialization" class="sec-ref"></a></td>
          </tr>
        </tbody>
      </table>

<p>
The  <code>@context</code> key is used to define Thing Description's context. All JSON key terms that are defined in the present document (also see <a href="#vocabularyDefinitionSection">Vocabulary Definition Section</a> ) have been put in an external context document, available at
  <code>https://www.w3.org/ns/td/w3c-wot-td-context.jsonld</code>. Each Thing Description instance in JSON-LD shall include this context information enmbedded within an JSON array structure. Thus, a basic Thing Description would contain the following declaration:
</p>

  <pre class="example">
    {
      "@context": ["https://www.w3.org/ns/td/w3c-wot-td-context.jsonld"],
      ...
    }
  </pre>

<p>
  In case a single Thing Description instance involves several contexts, additional namespaces with prefixes can be extended to the <code>@context</code> array structure. This option proves relevant if one wants to extend the existing Thing Description context without modifying it. For instance:
</p>
  <pre class="example">
    {
      "@context": ["https://www.w3.org/ns/td/w3c-wot-td-context.jsonld",
                   {"sensor": "http://example.org/sensors#"}],
      ...
    }
  </pre>

      <!-- p>A Thing Description will provide some generic Thing metadata vocabularies (also see <a href="#thing">Thing vocabulary definition section</a>) that can be used, e.g., 
      to assign a name or what kind of base URI does a servient support.</p -->

      <p>
        <b>Note:</b> Besides these pre-defined terms in the Thing Description context, additional characteristics can be
        added to Thing level such as product ID, firmware version, location, etc. These terms should then appear in the context of the Thing <!-- (as detailed in <a href="#td-context"></a>) -->.
      </p>

      <p class="ednote">This note should be moved to the td-context-extension definition once we have a section for that. In there it should be also explained that a context is not necessary if you are working outside of the RDF model and if you handle a TD just as a simple JSON document.
      </p>

      <p>The correspondences between the fields of the <a href="#thing">Thing class</a> and the JSON properties defined above are as follows.
      </p>

      <table class="def">
        <thead>
          <tr>
            <th>Field in Thing Class</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>interaction</td>
            <td>The value of JSON property <code>interaction</code>
          </tr>
          <tr>
            <td>security</td>
            <td>The value of JSON property <code>security</code>
          </tr>
          <tr>
            <td>base</td>
            <td>The value of JSON property <code>base</code>
          </tr>
          <tr>
            <td>name</td>
            <td>The value of JSON property <code>name</code></td>
          </tr>
        </tbody>
      </table>

      <p>For examples of full Thing Description, see <a href="#examples" class="sec-ref"></a>
      </p>

  </section>

  <section>
    <h1>Type System</h1>

    <p>All of the three interaction types <code>Property</code>, <code>Action</code>, and <code>Event</code> can specify the type of the value acceptable as an input or expected as an output of the interaction. In this section, we define an abstract type system notation based on JSON-LD for describing the structure and datatypes for values of interaction types. While type system is designed to be compatible with JSON schema [[draft-zyp-json-schema-04]] [[draft-fge-json-schema-validation-00]], it is intended to be encoding-neutral. It can not only be directly translated into JSON schema, but also can be handily translated into XML Schema. Use of JSON-LD equips the type system with a way to associate data elements with citations and semantic concepts defined elsewhere. 

<!-- JSON schema [[draft-zyp-json-schema-04]] [[draft-fge-json-schema-validation-00]] provides a standard way to describe the structure and datatypes of data, and we use JSON schema as the notation for value types of the interaction types. -->

    </p>

    <!-- p>
      <b>Note:</b> In the embodiment of type system described in this section, JSON schema is used as an abstract description system for structured data. 
      JSON schema is something that is already out there being used and well-known, therefore gives us a chance to get started quickly to experiment with type system idea for further contemplation. 
      Through discussion, the following points have been noted as feedback for improvements.
    </p>
      <ul>
        <li>JSON schema specification was designed for JSON, therefore, may not be an optimal solution as an encoding-neutral description system.</li>
        <li>JSON schema does not provide a way to associate data elements with citations or semantic concepts defined elsewhere.</li>
        <li>JSON schema is relatively verbose.</li>
        <li>JSON schema is not a formal standard.</li>
      </ul>
    <p>
      Note that the current plan is to use JSON-LD syntax to express the function of at least part of what JSON schema provides. This will enable Type System to allow the association of semantics while it remains compatible with JSON schema.
    </p -->

    <p>For <code>Property</code> and <code>Event</code> interaction types, each property or event can specify its value type using <code>outputData</code> field within respective interaction type definition. In the following example, <code>temperature</code> property and <code>criticalCondition</code> event are defined as  <code>number</code> and <code>string</code>, respectively.
    </p>

    <pre class="example">
      {
        ...
        "interaction": [
          ...
          {
            "@type": ["Property"],
            "name": "temperature",
            "outputData": { "type": "number" },
            ...
          }
          ...
          {
            "@type": ["Event"],
            "name": "criticalCondition",
            "outputData": { "type": "string" },
            ...
          }
          ...
        ]
        ...
      }
    </pre>

    <p>Similarly, for <code>Action</code> interaction type, each action can specify its input and/or output value type 
using <code>inputData</code> and <code>outputData</code> field, respectively. The following is an example value type definition for an action. In the example, <code>fadeIn</code> action is defined to have <code>inputData</code> of type <code>number</code> and <code>outputData</code> of type <code>boolean</code>.
    </p>

    <pre class="example">
      {
        ...
        "interaction": [
          ...
          {
            "@type": ["Action"],
            "name": "fadeIn",
            "inputData": {
              "type": "number",
              "actuator:unit": "actuator:ms"
            },
            "outputData": {
              "type": "boolean"
            },
            ...
          }
          ...
        ]
        ...
      }
    </pre>

    <p>Within <code>inputData</code> and <code>outputData</code> fields, type system allows the following definitions in the <code>type</code> field:
      <ul>
        <li>boolean</li>
        <li>integer</li>
        <li>number</li>
        <li>string</li>
        <li>array</li>
        <li>object</li>
      </ul>
    </p>

    <p>These type constructs are in parallel to those that are available in JSON schema. Therefore, serialization of data exchanged between servients is straightforward when it is in JSON format.
    </p>

    <section>
      <h4>Simple Data</h4>
	
      <p>Consider the following <code>inputData</code> definition which defines the value to be an <code>integer</code> within the value range of [ 0 ... 255 ].
      </p>

      <pre class="example">
        "inputData": { 
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
        }
      </pre>

      <p>When the <code>integer</code> being exchanged is 184, data serialization in JSON format will look like the following:
      </p>

      <pre class="example">
        184
      </pre>

      <p>The snippet in the above example is a valid JSON document according to the syntax defined in [[!RFC7159]], which allows sending simple types in the root of the document. There is no need for wrapping a single value into an object.
      </p>

      <p>The same data (i.e. a number equal to 184) will look like the following when the data is exchanged in XML.
      </p>

      <pre class="example">
      		&lt;integer>184&lt;/integer>
      </pre>

    </section>
  
    <section>
      <h4>Structured Data</h4>
  
      <p>In the previous section, we used an example <code>inputData</code> definition consisting of a single <code>integer</code>.
      </p>
	
      <p>With the type system, it is also possible to define value types that have more than one literal value.
      The type system provides two distinct constructs to define a structure that can have multiple literal values. 
      One is the <code>object</code>, and the other is the <code>array</code>.
      </p>

      <section>
        <h5 id="type-system-object">Object</h5>
    
        <p>The following is an example <code>inputData</code> definition that defines the value to be an <code>object</code> consisting of
        two named literals  <code>id</code> (of type <code>integer</code>) and <code>name</code> (of type <code>string</code>)
        where <code>id</code> is required to be present.
        </p>
    
        <pre class="example">
          "inputData": {
              "type": "object",
              "fields": [
                  {
                      "name": "id",
                      "type": "integer"
                  },
                  {
                      "name": "name",
                      "type": "string"
                  }
              ],
              "required": ["id"]
          }
        </pre>
    
        <p>When the <code>id</code> number and the <code>name</code> string values being exchanged are 1314520 and "Web of Things", data serialization in JSON format will look like the following.
        </p>
    
        <pre class="example">
          {
            "id": 1314520,
            "name": "Web of Things"
          }
        </pre>
    
        <p>The above data will look the following when the data is exchanged in XML.
        </p>
    
        <pre class="example">
            &lt;object>
              &lt;id>
                &lt;number>1314520&lt;/number>
              &lt;/id>
              &lt;name>
                &lt;string>Web of Things&lt;/string>
              &lt;/name>
            &lt;/object>
        </pre>

        <p>In both JSON and XML serialization, values can appear in any order regardless of the order used in the <code>fields</code> definition of the <code>object</code>.
        </p>

      </section>
  
      <section>
        <h5 id="type-system-array">Array</h5>
    
        <p>The following is an example <code>valueType</code> definition that defines the value to be an <code>array</code> that consists of
        exactly three number literals with each value within the range of [ 0 ... 2047 ].
        </p>
    
        <pre class="example">
          "inputData": {
              "type": "array",
              "items": {
                  "type" : "number",
                  "minimum": 0,
                  "maximum": 2047
              },
              "minItems" : 3,
              "maxItems" : 3
          }
        </pre>
    
        <p>When the numbers being exchanged are 520, 184 and 1314, data serialization in JSON format will look like the following.
        </p>
    
        <pre class="example">
          [
            520,
            184,
            1314
          ]
        </pre>
    
        <p>The above data will look the following when the data is exchanged in XML.
        </p>
    
        <pre class="example">
            &lt;array>
              &lt;number>520&lt;/number>
              &lt;number>184&lt;/number>
              &lt;number>1314&lt;/number>
            &lt;/array>
        </pre>
    
    
      </section><!-- End of "JSON Array" -->
  
    </section><!-- End of "Structured Data" -->
  
    <section>
    <h4>Mapping to XML Schema</h4>

      <p>In the previous section, examples showed what data whose value type is described using the type system
      look like when serialized to XML in parallel to corresponding JSON serializations.
      </p>

      <p>This section describes how type definitions described using the type system can be mapped to XML schema definitions by using the same examples.
      Given these type definitions, providing the mapping to XML schema allows XML tools to directly validate serialized XML data, for example.
      The XML structure for which this mapping is designed is based on EXI4JSON [[exi-for-json]].
      </p>

    <section>
      <h5>Object Definition to XML Schema</h5>

      <p>Shown below is the type system <code>object</code> definition given for the <code>inputData</code> in Section <a href="#type-system-object">Object</a>. The <code>object</code> consists of two named literals <code>id</code> (of type <code>integer</code>) and <code>name</code> (of type <code>string</code>) where <code>id</code> is required to be present.
      </p>

      <pre class="example">
        {
            "type": "object",
            "fields": [
                {
                    "name": "id",
                    "type": "integer"
                },
                {
                    "name": "name",
                    "type": "string"
                }
            ],
            "required": ["id"]
        }
      </pre>

      <p>When the <code>object</code> is anonymous (i.e. it is the root, or participates in an <code>array</code> definition), 
      the above <code>object</code> definition transforms to the following XML Schema element definition.
      </p>

      <pre class="example">
        &lt;xs:element name="object" xmlns:xs="http://www.w3.org/2001/XMLSchema">
            &lt;xs:complexType>
                &lt;xs:all>
                    &lt;xs:element name="id">
                        &lt;xs:complexType>
                          &lt;xs:sequence>
                            &lt;xs:element name="integer" type="xs:integer" />
                          &lt;/xs:sequence>
                        &lt;/xs:complexType>
                    &lt;/xs:element>
                    &lt;xs:element name="name" minOccurs="0">
                        &lt;xs:complexType>
                          &lt;xs:sequence>
                            &lt;xs:element name="string" type="xs:string" />
                          &lt;/xs:sequence>
                        &lt;/xs:complexType>
                    &lt;/xs:element>
                &lt;/xs:all>
            &lt;/xs:complexType>
        &lt;/xs:element>
        </pre>
  
        <!-- p class="ednote">JSON schema <code>object</code> does NOT define any order. 
        Therefore, in order to capture the constraints of JSON schema <code>object</code>, 
        we need to use xsd:all constructs instead of xsd:sequence.
        </p -->
  
        <p>Otherwise (i.e. the <code>object</code> is a member of another <code>object</code> definition, thus has a name), 
        the <code>object</code> definition transforms to the following XML schema element definition.
        Note <code><i>$name</i></code> represents the name of the <code>object</code>, and needs to be replaced by the actual name of the <code>object</code>.
        </p>
  
        <pre class="example">
          &lt;xs:element name="<i>$name</i>" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              &lt;xs:complexType>
                  &lt;xs:sequence>
                      &lt;xs:element name="object">
                          &lt;xs:complexType>
                              &lt;xs:all>
                                  &lt;xs:element name="id">
                                      &lt;xs:complexType>
                                        &lt;xs:sequence>
                                          &lt;xs:element name="integer" type="xs:integer" />
                                        &lt;/xs:sequence>
                                      &lt;/xs:complexType>
                                  &lt;/xs:element>
                                  &lt;xs:element name="name" minOccurs="0">
                                      &lt;xs:complexType>
                                        &lt;xs:sequence>
                                          &lt;xs:element name="string" type="xs:string" />
                                        &lt;/xs:sequence>
                                      &lt;/xs:complexType>
                                  &lt;/xs:element>
                              &lt;/xs:all>
                          &lt;/xs:complexType>
                      &lt;/xs:element>
                  &lt;/xs:sequence>
              &lt;/xs:complexType>
          &lt;/xs:element>
        </pre>
  
      </section><!-- End of "JSON Object Definition to XML Schema" -->

      <section>
        <h5>Array Definition to XML Schema</h5>

          <p>Shown below is the type system <code>array</code> definition given for the <code>inputData</code> in Section <a href="#type-system-array">Array</a>. 
          The <code>array</code> consists of exactly three number literals with each value within the value range of [ 0 ... 2047 ].</p>

        <pre class="example">
          {
              "type": "array",
              "items": {
                  "type" : "number",
                  "minimum": 0,
                  "maximum": 2047
              },
              "minItems" : 3,
              "maxItems" : 3
          }
        </pre>
  
        <p>When the <code>array</code> is anonymous (i.e. it is the root, or participates in another <code>array</code> definition), 
        the above <code>array</code> definition transforms to the following XML Schema element definition.
        </p>
  
        <pre class="example">
          &lt;xs:element name="array" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              &lt;xs:complexType>
                  &lt;xs:sequence>
                      &lt;xs:element name="double" minOccurs="3" maxOccurs="3">
                          &lt;xs:simpleType name="minInclusive">
                              &lt;xs:restriction base="xs:double">
                                  &lt;xs:minInclusive value="0"/>
                                  &lt;xs:maxInclusive value="2047"/>
                              &lt;/xs:restriction>
                          &lt;/xs:simpleType>
                      &lt;/xs:element>
                  &lt;/xs:sequence>
              &lt;/xs:complexType>
          &lt;/xs:element>
        </pre>

        <p>Otherwise (i.e. the <code>array</code> is a member of an <code>object</code> definition, thus has a name), 
        the <code>array</code> definition transforms to the following XML schema element definition.
        Note <code><i>$name</i></code> represents the name of the <code>array</code>, and needs to be replaced by the actual name of the <code>array</code>.
        </p>

        <pre class="example">
          &lt;xs:element name="<i>$name</i>" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              &lt;xs:complexType>
                  &lt;xs:sequence>
                      &lt;xs:element name="array">
                          &lt;xs:complexType>
                              &lt;xs:sequence>
                                  &lt;xs:element name="double" minOccurs="3" maxOccurs="3" >
                                      &lt;xs:simpleType name="minInclusive">
                                          &lt;xs:restriction base="xs:double">
                                              &lt;xs:minInclusive value="0"/>
                                              &lt;xs:maxInclusive value="2047"/>
                                          &lt;/xs:restriction>
                                      &lt;/xs:simpleType>
                                  &lt;/xs:element>
                              &lt;/xs:sequence>
                          &lt;/xs:complexType>
                      &lt;/xs:element>
                  &lt;/xs:sequence>
              &lt;/xs:complexType>
          &lt;/xs:element>
        </pre>
  
      </section><!-- End of "JSON Array Definition to XML Schema" -->

    </section><!-- End of "Mapping to XML Schema" -->


    </section><!-- End of "Mapping to XML Schema" -->

  <section>
    <h2>Parsing</h2>
<p>
To parse a valid Thing Description a simple JSON-based parser and tools can be used to retrieve the content. To validate and follow references to external context vocabulary, JSON-LD or RDF-based parsing tools and libraries are highly recommended.   
</p>
   </section>

  <section id="examples">
    <h2>Examples</h2>

    <p>
      In the following, we give three examples of a full TD. The first one, a
      temperature sensor, shows how to define relations between Thing
      Properties. As a second example, we modeled
      an actuator (LED lamp) where Actions have all been characterized semantically,
      so that machines could unambiguously interpret them in an automated manner.
      At last, association between Things is shown by defining a master switch
      controlling other LED lamps.
    </p>

    <section>
      <h4>Temperature Sensor</h4>

      <pre class="example">
        {
          "@context": ["https://w3c.github.io/wot/w3c-wot-td-context.jsonld",
                       "https://w3c.github.io/wot/w3c-wot-common-context.jsonld"],
          "@type": "Sensor",
          "name": "myTempSensor",
          "base" : "coap:///www.example.com:5683/temp/",
          "interaction": [
            {
              "@id": "val",
              "@type": ["Property","Temperature"],
              "unit": "celsius",
              "reference": "threshold",
              "name": "myTemp",
              "outputData": { "type": "number" },
              "writable": false,
              "link": [{
              	"href" : "val",
              	"mediaType": "application/json"
              }]
            }, 
            {
              "@id": "threshold",
              "@type": ["Property","Temperature"],
              "unit": "celsius",
              "name": "myThreshold",
              "outputData": { "type": "number" },
              "writable": true,
             	"link": [{
              	"href" : "thr",
              	"mediaType": "application/json"
              }]
            },
            {
              "@type": ["Event"],
              "outputData": { "type": "number" },
              "name": "myChange",
              "property": "temp",
              "link": [{
              	"href" : "val/changed",
              	"mediaType": "application/json"
              }]
            }, 
            {
              "@type": ["Event"],
              "outputData":  { "type": "number" },
              "name": "myWarning",
              "link": [{
              	"href" : "val/high",
              	"mediaType": "application/json"
              }]
            }
          ]
        }
      </pre>

      <p>
        The Thing <code>myTempSensor</code> defines two Properties: <code>myTemp</code>
        and <code>myThreshold</code>. Both are defined as temperatures, with the same unit
        (<code>celsius</code>). A client that is able to parse a TD only needs to know
        the predicate <code>reference</code> to understand that the threshold acts as
        a reference value for <code>myTemp</code> while the latter is the actual
        value measured by the temperature sensor. Here, <code>reference</code> points
        to <code>http://schema.org/valueReference</code>.
      </p>

      <p>
        Moreover, one of the Events of the Thing is linked to the measured value
        (with the predicate <code>property</code>). It means
        in that context that an event should be triggered each time <code>myTemp</code>
        changes. The other Event does not define further semantics. It could be used either
        in a closed system (where clients are aware of its meaning) or by a human but
        an external agent would not have sufficient information to interpret it.
      </p>
    </section>
    <section>
      <h4>LED Master Switch</h4>
      <pre class="example">
        {
          "@context": ["https://w3c.github.io/wot/w3c-wot-td-context.jsonld",
                       "https://w3c.github.io/wot/w3c-wot-common-context.jsonld"],
          "@type": "Lamp",
          "name": "myMasterLED",
          "interaction": [
            {
              "@type": ["Action", "Toggle"],
              "name": "myMasterOnOff",
              "inputData": {
                "@type": "OnOff",
                "type": "boolean"
              },
              "link": [
                {
                  "href" : "coap://www.example.com:5683/master",
                  "mediaType": "application/json"
                },
                {
                  "href" : "http://www.example.com:80/master",
                  "mediaType": "application/json"
                }
              ]
            }
          ],
          "associations": [
            { "hrefs": ["coap://www.example.com:5683/0"] },
            { "hrefs": ["coap://www.example.com:5683/1"] },
            { "hrefs": ["coap://www.example.com:5683/2"] },
            { "hrefs": ["coap://www.example.com:5683/3"] },
            { "hrefs": ["coap://www.example.com:5683/4"] },
            { "hrefs": ["coap://www.example.com:5683/5"] },
            { "hrefs": ["coap://www.example.com:5683/6"] },
            { "hrefs": ["coap://www.example.com:5683/7"] }
          ]
        }
      </pre>

      <p>
        In this last example, we illustrate the use of <code>associations</code>.
        The Thing we modeled here acts as a master switch for eight lamps similar
        to that of <a href="#led-actuator"></a>. This means switching on and off
        <code>myMasterOnOff</code> will propagate to all associated Things
        by toggling their Action that is also of type <code>Toggle</code>.
      </p>

      <p>
        No precise semantics for <code>associations</code> have been defined yet
        and there might exist many other kinds of dependency between Things than
        simply parent/child relations. This issue will be addressed soon. Until then,
        Thing associations could be useful for discovery.
      </p>


  </section>
  </section>
 
  </section>
    
<section id="security-consideration">
      <h4>Security Considerations</h4>
      <p>Security of a WoT system can refer to the security of the Thing Description itself or the security of
      the Thing the Thing Description describes.
      We focus here on the security of the Thing Description itself.
      More general discussion of overall security of a Thing (for example, best practices for WoT Interface design)
      can be found in the <a href="architecture">WoT Architecture</a> document.
      </p>
      <!-- @TODO Add howto about security metadata and how to use it; WIP -->
      <section>
	    <h5>Requirements</h5>
      <p>The security requirements of a WoT system depend on its context (for example, industrial vs. home)
      and the value of the assets it provides access to.
      In this section we discuss some security requirements
      by reference to a threat model designed for a WoT architecture.
      </p>
      <section>
        <h6>General</h6>
           <p>
            In general using the WoT approach should "do no harm": the security of any protocols should be maintained.
		    The Web of Things systems does not introduce new security mechanisms, 
            but should preserve the functionality of existing mechanisms.
            <ul>
                <li><strong>Exposing:</strong>
                When exposing a TD, especially via the Scripting API,
                it should be possible to use best practices for security,
                including maintaining the integrity of the TD and delivering it only to an authorized recipient.</li>
                <li><strong>Consuming:</strong>
		        A consumed TD should accurately reflect the actual security status of a target device.</li>
                <li><strong>Protocols:</strong>
		        We will ensure in particular that, at a minimum, 
                the needs of the following protocols are addressed: http(s) and coap(s).</li>
            </ul>
            </p>
      </section>
      <section>
          <h6>Assets</h6>
          <p>
		  From a security perspective each TD consists of the following assets:
           <ul>
               <li>A Thing Description itself and all its fields.</li>
               <li>A Thing object instance that the TD describes.</li> 
               <li>Resources exposed by the Thing Description.</li>
           </ul>
          </p>
      </section>
      <section>
          <h6>Threat Model</h6>
          <p>
	   <!-- TODO: This hyperlink should be turned into a proper reference -->
           The following main <a href="https://github.com/mmccool/wot/blob/master/security-privacy/AssetsThreatModelSecurityObjectives.md">threats</a> on the 
           above assets should be taken into account while developing a TD:
           <ul>
           <li><strong>WoT TD - Privacy.</strong>
              Publicly exposed information in TD can have strong privacy implications,
              such as information about individuals, their households, equipment etc.</li>
           <li><strong>WoT TD - Local Storage.</strong>
              Any local or remote attack method on TD in-storage the purpose of its modification,
              including rolling back to an older version of TD.</li>
           <li><strong>WoT Interface - General compromise.</strong>
              Any remote attack method using WoT Interface with the purpose of compromising 
		      the Thing instance and as a result getting access/control to all available WoT assets in the same 
              execution boundary.</li>
           <li><strong>WoT Interface - Unauthorized access.</strong>
              Any remote attack method using WoT Interface with the purpose of obtaining
              unauthorized access to a WoT asset.</li>
           <li><strong>WoT DoS.</strong>
              Any attack method using WoT Interface in order to cause a Denial of Service to another Thing,
              the resources it provides, other devices or infrastructure.
              Examples include invoking WoT Interface actions in a way that requires excessive processing and
              sending too many messages in a certain time frame, and
              disturbing the operation of a service by intentional dropping all or some messages.</li>
           <li><strong>WoT Communication - TD Authenticity.</strong> 
              Any attack method on TDs in-transfer with the purpose of its modification,
              including rolling back to an older version of TD.</li>
           <li><strong>WoT Communication - TD Confidentiality.</strong> 
              Any attack method on TDs during transfer with the purpose of obtaining
              unauthorized access to non-public parts of TDs.</li>
           </ul>
	    </p>
      </section>
      </section>
      <section>
	    <h5>Recommended Practices</h5>
        <p>Based on the security assets and threats listed above, we provide a set of recommended practices for
        enhancing security and privacy.</p>
        <section>
            <h6>Secure Delivery and Storage of Thing Description</h6>
            <p>
	    When a TD is transferred between endpoints, 
        it is important to at least use secure protocols guaranteeing
	    data authenticity and in many cases confidentiality 
        (depending on whenever a TD contains any confidential information)
        to avoid manipulation of a TD. 
</p><p>
      If end-to-end TD authenticity is required, it is possible to sign TD objects with either digital signatures (using asymmetric cryptographic primitives) or Message Authentication Codes (MACs, using symmetric cryptographic primitives). Such digital signatures or MACs are created by the producers/issuers of TD objects and validated by consumers of TD objects (which should reject signed TD objects whose signatures/MACs are invalid). For TD objects expressed in JSON, RFC 7515 (IETF JSON Web Signature: https://datatracker.ietf.org/doc/rfc7515/) provides the guidelines for computation and validation of digital signatures or MACs using JSON-based data structures. 
</p><p>
      Similarly, if end-to-end TD confidentiality is required (though probably a much more rare case than authenticity), it is possible to encrypt TD objects using available cryptographic encryption primitives. For TD objects expressed in JSON, RFC 7516 (IETF JSON Web Encryption: https://datatracker.ietf.org/doc/rfc7516/) provides the guidelines for encryption and decryption of JSON-based data structures. 
	    When TD is stored at the end device or remote storage,
        its authenticity and in some cases confidentiality should
	    also be protected using the best available local methods.
        An access control mechanism should also be used that prevents 
	    illegitimate modification of any of the TD's parts. 
            </p><p>
	    This recommendation helps prevent the following threats: 
            WoT Communication - TD Authenticity,
            WoT Communication - TD Confidentiality,
            WoT TD - Local Storage.
            </p>
        </section>
        <section>
	    <h6>Use Secure Transports</h6>
        <p>
	    When defining protocols for APIs exposed by a TD, 
        it is often important to use secure protocols guaranteeing
	    data authenticity and confidentiality.
        For example, coaps and https should be preferred to coap and http whenever possible.
        </p><p>
	    This recommendation helps prevent the following threats: 
            WoT Communication - Solution Data Authenticity,
            WoT Communication - Solution Data Confidentiality.
        </p>
        </section>
        <section>
	    <h6>Avoid Heavy Functional Processing without Authentication</h6>
        <p>
	    When defining WoT Interfaces exposed by a TD,
        it is important to avoid any heavy functional processing before the successful authentication
	    of a WoT client.
        Any publicly exposed network interface should avoid heavy processing altogether. 
        </p><p>
	    This recommendation helps prevent the following threats: 
            WoT DoS.
        </p>
        </section>
        <section>
	    <h6>Avoid Exposing Immutable Identifiers</h6>
        <p>
	    When defining fields exposed by a TD personally identifiable information should be avoided.
	    It is also strongly recommended to avoid exposing any immutable hardware identifiers.
        Instead it is recommended to use "soft identifiers", i.e. identifiers that can be changed during device lifecycle.
        </p><p>
	    This recommendation helps prevent the following threats: 
            WoT TD - Privacy.
        </p>
        </section>
        <section>
	    <h6>Minimize Network Interface Functionality</h6>
        <p>
	    Network interfaces exposed by a TD (WoT Interfaces) should only provide the minimal necessary functionality,
        which helps to minimize implementation errors,
	    possibilities for exposing potentially sensitive data, DoS attack possibilities etc.  
	    Devices should be strongly encapsulated, meaning the network interfaces should not expose implementation details
        (for example, the use of particular software frameworks).
	    Consider different levels of access for different users.
        </p><p>
	    This recommendation helps prevent the following threats: 
            WoT Interface - General compromise, 
            WoT Interface - Unauthorized API access, 
            WoT DoS. 
        </p>
        </section>
        <section>
	    <h5>Testing</h5>
        <p>
	    The WoT Interface exposed by a TD should be extensively tested for overall robustness,
        including the ability to handle malformed and malicious inputs.
	    When an HTTP interface is available for a Thing, 
        it may be possible to perform testing using available web service penetration testing tools. 
        <!-- todo: add names of the tools. -->
	<!-- (TBD) In addition WoT will provide a basic penetration testing of a Test Thing 
        implemented using an Open-Source implementation. -->
        </p><p>
	    This recommendation helps prevent the following threats: 
            WoT Interface - General compromise.
        </p>
        </section>
    </section>
 </section>

<section   id="acknowledgements" class="appendix normative">
<h1>Acknowledgements</h1>
<p>This document contains a significant contribution from Web of Things members: ...</p>
</section>

  </body>
</html>
